{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"This website is an interactive, partially autogenerated documentation for the pLabUtils library, built with MkDocs , Material for Mkdocs , and MkDocStrings . Expect to find Foo,Bar and friends in the documentation 1 Usage : With foo , a function of the strings module of this library : import LabUtils bar = LabUtils . foo () Import only specific modules : from pLabUtils import strings bar = strings . foo () or from pLabUtils.strings import * bar = foo () !!! Note: In many packages depending on this library, LibUtils is imported as luti, for shorter reference. Documentation : Data manipulation modules for Geometry - geometry module for Strings - strings module for Dictionnaries - dicts module for Iterators and generators - iters module For external libraries types : ( extern module) for pandas.dataframes General purpose custom types structures : custom structures - structs module User workflow enhancement modules user experience workflows module local network utility network module file input output utility - fileio module [Metasyntaxic variables](https://en.wikipedia.org/wiki/Metasyntactic_variable#General_usage) \u21a9","title":"Usage"},{"location":"index.html#_1","text":"This website is an interactive, partially autogenerated documentation for the pLabUtils library, built with MkDocs , Material for Mkdocs , and MkDocStrings . Expect to find Foo,Bar and friends in the documentation 1","title":""},{"location":"index.html#usage","text":"With foo , a function of the strings module of this library : import LabUtils bar = LabUtils . foo () Import only specific modules : from pLabUtils import strings bar = strings . foo () or from pLabUtils.strings import * bar = foo () !!! Note: In many packages depending on this library, LibUtils is imported as luti, for shorter reference.","title":"Usage :"},{"location":"index.html#documentation","text":"","title":"Documentation :"},{"location":"index.html#data-manipulation-modules","text":"for Geometry - geometry module for Strings - strings module for Dictionnaries - dicts module for Iterators and generators - iters module For external libraries types : ( extern module) for pandas.dataframes General purpose custom types structures : custom structures - structs module","title":"Data manipulation modules"},{"location":"index.html#user-workflow-enhancement-modules","text":"user experience workflows module local network utility network module file input output utility - fileio module [Metasyntaxic variables](https://en.wikipedia.org/wiki/Metasyntactic_variable#General_usage) \u21a9","title":"User workflow enhancement modules"},{"location":"dicts/drop_matched_keys.html","text":"drop_matched_keys ( dict_to_modify , source_dict ) Drops all the keys of a dict that have the same name as the keys in a source dictionnary. Return dictionnary containing the rest. Parameters: Name Type Description Default dict_to_modify TYPE DESCRIPTION. required source_dict TYPE DESCRIPTION. required Returns: Type Description modified_dict (TYPE) DESCRIPTION.","title":"drop_matched_keys"},{"location":"dicts/drop_matched_keys.html#_1","text":"","title":""},{"location":"dicts/drop_matched_keys.html#dicts.drop_matched_keys","text":"Drops all the keys of a dict that have the same name as the keys in a source dictionnary. Return dictionnary containing the rest. Parameters: Name Type Description Default dict_to_modify TYPE DESCRIPTION. required source_dict TYPE DESCRIPTION. required Returns: Type Description modified_dict (TYPE) DESCRIPTION.","title":"drop_matched_keys()"},{"location":"dicts/keep_matched_keys.html","text":"keep_matched_keys ( dict_to_modify , model_keys ) Drops only the keys of a dict that do not have the same name as the keys in a source dictionnary. Return dictionnary containing the rest. Parameters: Name Type Description Default dict_to_modify TYPE DESCRIPTION. required source_dict TYPE DESCRIPTION. required Returns: Type Description modified_dict (TYPE) DESCRIPTION.","title":"keep_matched_keys"},{"location":"dicts/keep_matched_keys.html#_1","text":"","title":""},{"location":"dicts/keep_matched_keys.html#dicts.keep_matched_keys","text":"Drops only the keys of a dict that do not have the same name as the keys in a source dictionnary. Return dictionnary containing the rest. Parameters: Name Type Description Default dict_to_modify TYPE DESCRIPTION. required source_dict TYPE DESCRIPTION. required Returns: Type Description modified_dict (TYPE) DESCRIPTION.","title":"keep_matched_keys()"},{"location":"docs/mkds_make_docfiles.html","text":"mkds_make_docfiles ( path : str ) -> None","title":"mkds_make_docfiles"},{"location":"docs/mkds_make_docfiles.html#_1","text":"","title":""},{"location":"docs/mkds_make_docfiles.html#docs.mkds_make_docfiles","text":"","title":"mkds_make_docfiles()"},{"location":"docs/mkds_markdown_indexfile.html","text":"mkds_markdown_indexfile TODO : make this class so we can add modules, their top doctring and their child classes and function as list in a summary inside index.md in the doc folder or any project. Also : add balises around the boilerplate 'Created on Wed Aug 25 10:40:20 2021 @author: Timothe' to avoid putting it everywhere in the doc. Add a balise to skip a part of the doctring Add a balise to skip the entire doctring Add a balise to specify the position of the content_index. Add links between summary items and their .md pages","title":"mkds_markdown_indexfile"},{"location":"docs/mkds_markdown_indexfile.html#_1","text":"","title":""},{"location":"docs/mkds_markdown_indexfile.html#docs.mkds_markdown_indexfile","text":"TODO : make this class so we can add modules, their top doctring and their child classes and function as list in a summary inside index.md in the doc folder or any project. Also : add balises around the boilerplate 'Created on Wed Aug 25 10:40:20 2021 @author: Timothe' to avoid putting it everywhere in the doc. Add a balise to skip a part of the doctring Add a balise to skip the entire doctring Add a balise to specify the position of the content_index. Add links between summary items and their .md pages","title":"mkds_markdown_indexfile"},{"location":"docs/mkds_markdownfile_content.html","text":"mkds_markdownfile_content ( item_name : str , item_type : str ) -> str","title":"mkds_markdownfile_content"},{"location":"docs/mkds_markdownfile_content.html#_1","text":"","title":""},{"location":"docs/mkds_markdownfile_content.html#docs.mkds_markdownfile_content","text":"","title":"mkds_markdownfile_content()"},{"location":"docs/mkds_mod_mkdocs_yml_archi.html","text":"mkds_mod_mkdocs_yml_archi ( path : str , appendings : list ) -> None","title":"mkds_mod_mkdocs_yml_archi"},{"location":"docs/mkds_mod_mkdocs_yml_archi.html#_1","text":"","title":""},{"location":"docs/mkds_mod_mkdocs_yml_archi.html#docs.mkds_mod_mkdocs_yml_archi","text":"","title":"mkds_mod_mkdocs_yml_archi()"},{"location":"docs/mkds_pyfile_parser.html","text":"mkds_pyfile_parser Attributes: Name Type Description modulename str the name of the module without the .py extension content dict a dictionnary with two keys : functions and classes , each of wich containing a list of the classes and functions in the module with the format : \"module.fooclass\" or \"module.foofunction\". content doesn't registers classes internal functions. Methods docs . mkds_pyfile_parser . __init__ ( self , path ) special Constructor method of the class. Parameters: Name Type Description Default path str The full path to a python file that has been parsed. required Returns: Type Description mkds_pyfile_parser An instance of this class. docs . mkds_pyfile_parser . is_empty ( self ) Returns: Type Description bool DESCRIPTION. docs . mkds_pyfile_parser . visit ( self , generic_arg = None ) Takes as argument the output of ast.parse(). Itself takes as argument the str returned by reading a whole .py file. This method is the way we visit every node of the file and on the way, we register the classes and functions names. Returns: Type Description NoneType Returns None. Use to be able to fill content with the classes and methods of the file. Examples: parser = mkds_pyfile_parser ( filepath ) parser . visit () print ( parser . content ) Tip To explude functions/classes from being returned and lead to the creation of a mkdoctrings entry, use the balise : EXCLUDE_FUNC_OR_CLASS_FROM_MKDOCSTRINGS anywhere in the doctring of your function/class. In the same way, a whole module can be excluded by including the balise < EXCLUDE_MODULE_FROM_MKDOCSTRINGS > (with angle brackets) anywhere in the boilerplate at the top of your module.","title":"mkds_pyfile_parser"},{"location":"docs/mkds_pyfile_parser.html#_1","text":"","title":""},{"location":"docs/mkds_pyfile_parser.html#docs.mkds_pyfile_parser","text":"Attributes: Name Type Description modulename str the name of the module without the .py extension content dict a dictionnary with two keys : functions and classes , each of wich containing a list of the classes and functions in the module with the format : \"module.fooclass\" or \"module.foofunction\". content doesn't registers classes internal functions.","title":"mkds_pyfile_parser"},{"location":"docs/mkds_pyfile_parser.html#docs.mkds_pyfile_parser-methods","text":"","title":"Methods"},{"location":"docs/mkds_pyfile_parser.html#docs.mkds_pyfile_parser.__init__","text":"Constructor method of the class. Parameters: Name Type Description Default path str The full path to a python file that has been parsed. required Returns: Type Description mkds_pyfile_parser An instance of this class.","title":"__init__()"},{"location":"docs/mkds_pyfile_parser.html#docs.mkds_pyfile_parser.is_empty","text":"Returns: Type Description bool DESCRIPTION.","title":"is_empty()"},{"location":"docs/mkds_pyfile_parser.html#docs.mkds_pyfile_parser.visit","text":"Takes as argument the output of ast.parse(). Itself takes as argument the str returned by reading a whole .py file. This method is the way we visit every node of the file and on the way, we register the classes and functions names. Returns: Type Description NoneType Returns None. Use to be able to fill content with the classes and methods of the file. Examples: parser = mkds_pyfile_parser ( filepath ) parser . visit () print ( parser . content ) Tip To explude functions/classes from being returned and lead to the creation of a mkdoctrings entry, use the balise : EXCLUDE_FUNC_OR_CLASS_FROM_MKDOCSTRINGS anywhere in the doctring of your function/class. In the same way, a whole module can be excluded by including the balise < EXCLUDE_MODULE_FROM_MKDOCSTRINGS > (with angle brackets) anywhere in the boilerplate at the top of your module.","title":"visit()"},{"location":"externs/empty_df.html","text":"empty_df ( columns , dtypes = [], index = None ) Creates an empty dataframe with the columns and data types as specified. Previously named df_empty Parameters: Name Type Description Default columns list list of columns names (list of str) . required dtypes list list of data types. Can be numpy built in data types, pandas, or numpy. [] index list Index name. Defaults to None. (If None : auto integer index corresponding to row numbers) None Todo Add ability to create multi-index with that function Returns: Type Description pd.DataFrame The dataframe with the desired columns names and indices.","title":"empty_df"},{"location":"externs/empty_df.html#_1","text":"","title":""},{"location":"externs/empty_df.html#externs.empty_df","text":"Creates an empty dataframe with the columns and data types as specified. Previously named df_empty Parameters: Name Type Description Default columns list list of columns names (list of str) . required dtypes list list of data types. Can be numpy built in data types, pandas, or numpy. [] index list Index name. Defaults to None. (If None : auto integer index corresponding to row numbers) None Todo Add ability to create multi-index with that function Returns: Type Description pd.DataFrame The dataframe with the desired columns names and indices.","title":"empty_df()"},{"location":"fileio/ConfigFile.html","text":"ConfigFile Methods fileio . ConfigFile . __init__ ( self , path , ** kwargs ) special A class to access config files through an object with indexing, either for geting or seting values. Seamless and easy integration in code, ability to load or set multiple variables at once for more readability when using in static environments. (e.g. functions or simple classes) If not existing, the file will be created (but folder must exist) when key values are assigned. Python standard variables are supported, as well as numpy arrays, internally represented as nested lists. Avoid using complex numpy structures as they could be erroneously loaded from file. (no specific dtypes support #TODO) Parameters path : str Path to the config file. **kwargs : TYPE DESCRIPTION. Returns A variable which is also a handle to the file. Can be used to load values with tho text indexes (two layer dictionary) or set values in the same way (immediately applies changes to the text file on setting variable value)","title":"ConfigFile"},{"location":"fileio/ConfigFile.html#_1","text":"","title":""},{"location":"fileio/ConfigFile.html#fileio.ConfigFile","text":"","title":"ConfigFile"},{"location":"fileio/ConfigFile.html#fileio.ConfigFile-methods","text":"","title":"Methods"},{"location":"fileio/ConfigFile.html#fileio.ConfigFile.__init__","text":"A class to access config files through an object with indexing, either for geting or seting values. Seamless and easy integration in code, ability to load or set multiple variables at once for more readability when using in static environments. (e.g. functions or simple classes) If not existing, the file will be created (but folder must exist) when key values are assigned. Python standard variables are supported, as well as numpy arrays, internally represented as nested lists. Avoid using complex numpy structures as they could be erroneously loaded from file. (no specific dtypes support #TODO)","title":"__init__()"},{"location":"fileio/ConfigFile.html#fileio.ConfigFile.__init__--parameters","text":"path : str Path to the config file. **kwargs : TYPE DESCRIPTION.","title":"Parameters"},{"location":"fileio/ConfigFile.html#fileio.ConfigFile.__init__--returns","text":"A variable which is also a handle to the file. Can be used to load values with tho text indexes (two layer dictionary) or set values in the same way (immediately applies changes to the text file on setting variable value)","title":"Returns"},{"location":"fileio/Pickle.html","text":"Pickle","title":"Pickle"},{"location":"fileio/Pickle.html#_1","text":"","title":""},{"location":"fileio/Pickle.html#fileio.Pickle","text":"","title":"Pickle"},{"location":"fileio/paste_dir_content.html","text":"paste_dir_content ( src , dst , include_root_files : bool = True , copy : bool = True )","title":"paste_dir_content"},{"location":"fileio/paste_dir_content.html#_1","text":"","title":""},{"location":"fileio/paste_dir_content.html#fileio.paste_dir_content","text":"","title":"paste_dir_content()"},{"location":"geometries/Corner_detection.html","text":"Corner_detection ( Centroid , Contour )","title":"Corner_detection"},{"location":"geometries/Corner_detection.html#_1","text":"","title":""},{"location":"geometries/Corner_detection.html#geometries.Corner_detection","text":"","title":"Corner_detection()"},{"location":"geometries/Distance.html","text":"Distance ( x1 , y1 , x2 , y2 )","title":"Distance"},{"location":"geometries/Distance.html#_1","text":"","title":""},{"location":"geometries/Distance.html#geometries.Distance","text":"","title":"Distance()"},{"location":"geometries/Distances.html","text":"Distances ( A , B )","title":"Distances"},{"location":"geometries/Distances.html#_1","text":"","title":""},{"location":"geometries/Distances.html#geometries.Distances","text":"","title":"Distances()"},{"location":"geometries/Means.html","text":"Means ( A , B )","title":"Means"},{"location":"geometries/Means.html#_1","text":"","title":""},{"location":"geometries/Means.html#geometries.Means","text":"","title":"Means()"},{"location":"geometries/Trajectory_Window.html","text":"Trajectory_Window ( Trajectory , window , height = None , ** kwargs )","title":"Trajectory_Window"},{"location":"geometries/Trajectory_Window.html#_1","text":"","title":""},{"location":"geometries/Trajectory_Window.html#geometries.Trajectory_Window","text":"","title":"Trajectory_Window()"},{"location":"geometries/UChgtVar.html","text":"UChgtVar ( a , b , teta , x , y ) a,b = la translation subie par le rep\u00e8re;teta = l'angle en degr\u00e9 de la rotation subie par le rep\u00e8re; coord = dans l'ancien rep\u00e8re, matrice de [x,y] a transposer dans le nouveau rep\u00e8re Retourne les coordonn\u00e9es correspondantes dans le nouveau rep\u00e8re, avant rotation et translation","title":"UChgtVar"},{"location":"geometries/UChgtVar.html#_1","text":"","title":""},{"location":"geometries/UChgtVar.html#geometries.UChgtVar","text":"a,b = la translation subie par le rep\u00e8re;teta = l'angle en degr\u00e9 de la rotation subie par le rep\u00e8re; coord = dans l'ancien rep\u00e8re, matrice de [x,y] a transposer dans le nouveau rep\u00e8re Retourne les coordonn\u00e9es correspondantes dans le nouveau rep\u00e8re, avant rotation et translation","title":"UChgtVar()"},{"location":"geometries/UGetAngle.html","text":"UGetAngle ( A , B , C = None ) Takes two UPoints and calculate direction vectors from the two points and a conventionnal [0,-1] vector Then calculates the determinant and the dot product of the two vectors, and then compute arc tangent of the resulting vectors. Formula : \u03b8 = atan2( \u2225u\u00d7v\u2225 , u\u2219v ) https://www.jwwalker.com/pages/angle-between-vectors.html Returns angles in degrees, and as a convention , if used with classic indexed image array values, when oriented up, a line returns 0 degree (compared to convention). When tilting from that position to the right gives positive angles ,and when tilting left, give negative angles. cf schema : -45\u00b0 0\u00b0 +45\u00b0 \\ | / \\ | /","title":"UGetAngle"},{"location":"geometries/UGetAngle.html#_1","text":"","title":""},{"location":"geometries/UGetAngle.html#geometries.UGetAngle","text":"Takes two UPoints and calculate direction vectors from the two points and a conventionnal [0,-1] vector Then calculates the determinant and the dot product of the two vectors, and then compute arc tangent of the resulting vectors. Formula : \u03b8 = atan2( \u2225u\u00d7v\u2225 , u\u2219v ) https://www.jwwalker.com/pages/angle-between-vectors.html Returns angles in degrees, and as a convention , if used with classic indexed image array values, when oriented up, a line returns 0 degree (compared to convention). When tilting from that position to the right gives positive angles ,and when tilting left, give negative angles. cf schema : -45\u00b0 0\u00b0 +45\u00b0 \\ | / \\ | /","title":"UGetAngle()"},{"location":"geometries/ULine.html","text":"ULine The purpose of the class is to make \"readable\" and to fix a convention for x and y array dimensions on points, lines and array of lines. Thus, the most easy to acess value is by .x and .y properties, or A and B for points. If acessing array is necessary, for speed purposes, you can get the values by calling specific properties. For Upoints, you can call .vec ( as vector ). The returned array has x on index 0 and y on index 1 For Ulines, you can call .seg ( as segment ). The returned array has 2 dimensions, first is point A, second is point B. In each dimension you have an arrya containing x and y as in vec. For UlineCollection you can call .array, or acess slices by directly indexing the class object. The array has 3 dimensions, and their content is described in the method dim_names","title":"ULine"},{"location":"geometries/ULine.html#_1","text":"","title":""},{"location":"geometries/ULine.html#geometries.ULine","text":"The purpose of the class is to make \"readable\" and to fix a convention for x and y array dimensions on points, lines and array of lines. Thus, the most easy to acess value is by .x and .y properties, or A and B for points. If acessing array is necessary, for speed purposes, you can get the values by calling specific properties. For Upoints, you can call .vec ( as vector ). The returned array has x on index 0 and y on index 1 For Ulines, you can call .seg ( as segment ). The returned array has 2 dimensions, first is point A, second is point B. In each dimension you have an arrya containing x and y as in vec. For UlineCollection you can call .array, or acess slices by directly indexing the class object. The array has 3 dimensions, and their content is described in the method dim_names","title":"ULine"},{"location":"geometries/ULineCollection.html","text":"ULineCollection Attributes geometries . ULineCollection . array property readonly Dimension 0 : Time Dimension 1 : Point A or B Dimension 2 : coord x or y Methods geometries . ULineCollection . dist_time ( self , tracker = 'both' , ** kwargs ) calculate distances between a trackers to a point in time and the next all along the collection ( 2 dimensions, one for each tracker ) geometries . ULineCollection . dist_tracker ( self ) calculate distances between trackers all along the collection","title":"ULineCollection"},{"location":"geometries/ULineCollection.html#_1","text":"","title":""},{"location":"geometries/ULineCollection.html#geometries.ULineCollection","text":"","title":"ULineCollection"},{"location":"geometries/ULineCollection.html#geometries.ULineCollection-attributes","text":"","title":"Attributes"},{"location":"geometries/ULineCollection.html#geometries.ULineCollection.array","text":"Dimension 0 : Time Dimension 1 : Point A or B Dimension 2 : coord x or y","title":"array"},{"location":"geometries/ULineCollection.html#geometries.ULineCollection-methods","text":"","title":"Methods"},{"location":"geometries/ULineCollection.html#geometries.ULineCollection.dist_time","text":"calculate distances between a trackers to a point in time and the next all along the collection ( 2 dimensions, one for each tracker )","title":"dist_time()"},{"location":"geometries/ULineCollection.html#geometries.ULineCollection.dist_tracker","text":"calculate distances between trackers all along the collection","title":"dist_tracker()"},{"location":"geometries/UPoint.html","text":"UPoint Upoint class is used to create an uniformized way of storing 2D points data. It can be used with other objects of that library to calculate basic geomety. Attributes: Name Type Description vec np.array a numpy array of two values containing the x,y coordinates. x and y methods are just wrapper to access the values stored there. x scalar returns x coordinate of the current point. y scalar returns y coordinate of the current point. isnan bool returns True if either x or y coordinates of the current point are np.nan. False otherwise Methods geometries . UPoint . __init__ ( self , x , y = None ) special Contructor for Upoint class. (2D space point) Parameters: Name Type Description Default x scalar / np.array x coordinate of the point if an int is given for y. If no y coordinate argument is given, x is expected to be a 2 value arraylike with first index as x and second index as y. required y scalar y coordinate of the point or None, if x and y coords are given in an array like structure as fisrt argument. Defaults to None. None Returns: Type Description UPoint An instance of the class geometries . UPoint . distance ( self , point ) Euclidian distance between the current point instance, and another point instance passed as first argument. Parameters: Name Type Description Default point UPoint the point to calculate distance relative to the current UPoint instance. required Returns: Type Description dist (int float) the distance, in the same unit as the coordinate system used for both UPoints. geometries . UPoint . dot ( self , point ) Performs the dot vector product of the object holding this point and another Upoint object given as argument. Parameters: Name Type Description Default point UPoint The other Upoint object to perform dot product.. required Returns: Type Description scalar The result of the dot product of the two points.","title":"UPoint"},{"location":"geometries/UPoint.html#_1","text":"","title":""},{"location":"geometries/UPoint.html#geometries.UPoint","text":"Upoint class is used to create an uniformized way of storing 2D points data. It can be used with other objects of that library to calculate basic geomety. Attributes: Name Type Description vec np.array a numpy array of two values containing the x,y coordinates. x and y methods are just wrapper to access the values stored there. x scalar returns x coordinate of the current point. y scalar returns y coordinate of the current point. isnan bool returns True if either x or y coordinates of the current point are np.nan. False otherwise","title":"UPoint"},{"location":"geometries/UPoint.html#geometries.UPoint-methods","text":"","title":"Methods"},{"location":"geometries/UPoint.html#geometries.UPoint.__init__","text":"Contructor for Upoint class. (2D space point) Parameters: Name Type Description Default x scalar / np.array x coordinate of the point if an int is given for y. If no y coordinate argument is given, x is expected to be a 2 value arraylike with first index as x and second index as y. required y scalar y coordinate of the point or None, if x and y coords are given in an array like structure as fisrt argument. Defaults to None. None Returns: Type Description UPoint An instance of the class","title":"__init__()"},{"location":"geometries/UPoint.html#geometries.UPoint.distance","text":"Euclidian distance between the current point instance, and another point instance passed as first argument. Parameters: Name Type Description Default point UPoint the point to calculate distance relative to the current UPoint instance. required Returns: Type Description dist (int float) the distance, in the same unit as the coordinate system used for both UPoints.","title":"distance()"},{"location":"geometries/UPoint.html#geometries.UPoint.dot","text":"Performs the dot vector product of the object holding this point and another Upoint object given as argument. Parameters: Name Type Description Default point UPoint The other Upoint object to perform dot product.. required Returns: Type Description scalar The result of the dot product of the two points.","title":"dot()"},{"location":"geometries/UPointCollection.html","text":"UPointCollection Attributes geometries . UPointCollection . array property readonly Dimension 0 : Time Dimension 1 : coord x or y","title":"UPointCollection"},{"location":"geometries/UPointCollection.html#_1","text":"","title":""},{"location":"geometries/UPointCollection.html#geometries.UPointCollection","text":"","title":"UPointCollection"},{"location":"geometries/UPointCollection.html#geometries.UPointCollection-attributes","text":"","title":"Attributes"},{"location":"geometries/UPointCollection.html#geometries.UPointCollection.array","text":"Dimension 0 : Time Dimension 1 : coord x or y","title":"array"},{"location":"geometries/orth_change.html","text":"orth_change ( PointCollec , Unoseneckline , sym = False , frameShape = ( 500 , 250 , None ))","title":"orth_change"},{"location":"geometries/orth_change.html#_1","text":"","title":""},{"location":"geometries/orth_change.html#geometries.orth_change","text":"","title":"orth_change()"},{"location":"geometries/removenans.html","text":"removenans ( array ) Deprecated. Better use the dunction designed in Parameters: Name Type Description Default array TYPE DESCRIPTION. required Returns: Type Description array (TYPE) DESCRIPTION.","title":"removenans"},{"location":"geometries/removenans.html#_1","text":"","title":""},{"location":"geometries/removenans.html#geometries.removenans","text":"Deprecated. Better use the dunction designed in Parameters: Name Type Description Default array TYPE DESCRIPTION. required Returns: Type Description array (TYPE) DESCRIPTION.","title":"removenans()"},{"location":"iters/nest_iter.html","text":"nest_iter ( dimension , current_dimension = None , slicing = False , ** kwargs ) Recursive function that produces a generator meant to yield nested index values to target every possible array sub_unit, whatever the number of provided dimensions Parameters dimension : TYPE DESCRIPTION. current_dimension : TYPE, optional Internal only parameter. Specifies the current state of the iteration for the yielder. The default is None. slicing : Bool, optional dimensions indices are returns in the format of a tuple of slices objects (for better compatibility with numpy arrays) The default is False. **kwargs : TYPE DESCRIPTION. Raises StopIteration DESCRIPTION. Yields TYPE DESCRIPTION.","title":"nest_iter"},{"location":"iters/nest_iter.html#_1","text":"","title":""},{"location":"iters/nest_iter.html#iters.nest_iter","text":"Recursive function that produces a generator meant to yield nested index values to target every possible array sub_unit, whatever the number of provided dimensions","title":"nest_iter()"},{"location":"iters/nest_iter.html#iters.nest_iter--parameters","text":"dimension : TYPE DESCRIPTION. current_dimension : TYPE, optional Internal only parameter. Specifies the current state of the iteration for the yielder. The default is None. slicing : Bool, optional dimensions indices are returns in the format of a tuple of slices objects (for better compatibility with numpy arrays) The default is False. **kwargs : TYPE DESCRIPTION.","title":"Parameters"},{"location":"iters/nest_iter.html#iters.nest_iter--raises","text":"StopIteration DESCRIPTION.","title":"Raises"},{"location":"iters/nest_iter.html#iters.nest_iter--yields","text":"TYPE DESCRIPTION.","title":"Yields"},{"location":"iters/unique_pairs.html","text":"unique_pairs ( a , b ) Produce pairs of values from two iterables","title":"unique_pairs"},{"location":"iters/unique_pairs.html#_1","text":"","title":""},{"location":"iters/unique_pairs.html#iters.unique_pairs","text":"Produce pairs of values from two iterables","title":"unique_pairs()"},{"location":"networks/StaticSQLEngine.html","text":"StaticSQLEngine ( * args , ** kwargs )","title":"StaticSQLEngine"},{"location":"networks/StaticSQLEngine.html#_1","text":"","title":""},{"location":"networks/StaticSQLEngine.html#workflows.StaticSQLEngine","text":"","title":"StaticSQLEngine()"},{"location":"networks/is_port_open.html","text":"is_port_open ( ip , port ) Previously named isOpen Parameters: Name Type Description Default ip TYPE DESCRIPTION. required port TYPE DESCRIPTION. required Returns: Type Description bool DESCRIPTION.","title":"is_port_open"},{"location":"networks/is_port_open.html#_1","text":"","title":""},{"location":"networks/is_port_open.html#networks.is_port_open","text":"Previously named isOpen Parameters: Name Type Description Default ip TYPE DESCRIPTION. required port TYPE DESCRIPTION. required Returns: Type Description bool DESCRIPTION.","title":"is_port_open()"},{"location":"networks/open_sql.html","text":"open_sql ( input_method ) Previously named OpenSQL input_method is either a string formated as an sqlalchemy \"connect_string\" or a function that returns a \"connect_string\" Exceptions: Type Description sql DESCRIPTION. Returns: Type Description engine (TYPE) DESCRIPTION.","title":"open_sql"},{"location":"networks/open_sql.html#_1","text":"","title":""},{"location":"networks/open_sql.html#networks.open_sql","text":"Previously named OpenSQL input_method is either a string formated as an sqlalchemy \"connect_string\" or a function that returns a \"connect_string\" Exceptions: Type Description sql DESCRIPTION. Returns: Type Description engine (TYPE) DESCRIPTION.","title":"open_sql()"},{"location":"pathes/BinarySearch.html","text":"BinarySearch ( InputFolder , extension )","title":"BinarySearch"},{"location":"pathes/BinarySearch.html#_1","text":"","title":""},{"location":"pathes/BinarySearch.html#pathes.BinarySearch","text":"","title":"BinarySearch()"},{"location":"pathes/GetVersionnedPickles.html","text":"GetVersionnedPickles ( folder , analysis , version )","title":"GetVersionnedPickles"},{"location":"pathes/GetVersionnedPickles.html#_1","text":"","title":""},{"location":"pathes/GetVersionnedPickles.html#pathes.GetVersionnedPickles","text":"","title":"GetVersionnedPickles()"},{"location":"pathes/folder_search.html","text":"folder_search ( input_folder , file_name ) Scans a folder an returns a list of the paths to files that match the requirements. The matching is litteral. Previously named Foldersearch Warning It is just returning rigidly the files that exaclty match the path entered. Prefer re_folder_search for a more flexible scan using regular expressions. Parameters: Name Type Description Default input_folder str Root path from wich to search deeper. required file_name str A name of folder or file located in any subfolders (max recursion depth : 1) of the input_folder. required Returns: Type Description NewDirlist (list) List of dirs matching the requirement.","title":"folder_search"},{"location":"pathes/folder_search.html#_1","text":"","title":""},{"location":"pathes/folder_search.html#pathes.folder_search","text":"Scans a folder an returns a list of the paths to files that match the requirements. The matching is litteral. Previously named Foldersearch Warning It is just returning rigidly the files that exaclty match the path entered. Prefer re_folder_search for a more flexible scan using regular expressions. Parameters: Name Type Description Default input_folder str Root path from wich to search deeper. required file_name str A name of folder or file located in any subfolders (max recursion depth : 1) of the input_folder. required Returns: Type Description NewDirlist (list) List of dirs matching the requirement.","title":"folder_search()"},{"location":"pathes/get_most_recent_file.html","text":"get_most_recent_file ( filelist ) Previously named GetMostRecentFile Parameters: Name Type Description Default filelist list tuple List of file paths from wich to search the most recent one. required Returns: Type Description most_recent_file (str) Path to the most recent file.","title":"get_most_recent_file"},{"location":"pathes/get_most_recent_file.html#_1","text":"","title":""},{"location":"pathes/get_most_recent_file.html#pathes.get_most_recent_file","text":"Previously named GetMostRecentFile Parameters: Name Type Description Default filelist list tuple List of file paths from wich to search the most recent one. required Returns: Type Description most_recent_file (str) Path to the most recent file.","title":"get_most_recent_file()"},{"location":"pathes/is_or_makedir.html","text":"is_or_makedir ( input_path ) Search for a directory. Does nothing if it exists. Create it otherwise (and the subfolders necessary to make the arborescence complete) Parameters: Name Type Description Default input_path str Path to the directory to be checked or created. required Returns: Type Description Always returns None.","title":"is_or_makedir"},{"location":"pathes/is_or_makedir.html#_1","text":"","title":""},{"location":"pathes/is_or_makedir.html#pathes.is_or_makedir","text":"Search for a directory. Does nothing if it exists. Create it otherwise (and the subfolders necessary to make the arborescence complete) Parameters: Name Type Description Default input_path str Path to the directory to be checked or created. required Returns: Type Description Always returns None.","title":"is_or_makedir()"},{"location":"pathes/list_recursive_dirs.html","text":"list_recursive_dirs ( input_path , condition = 'True' )","title":"list_recursive_dirs"},{"location":"pathes/list_recursive_dirs.html#_1","text":"","title":""},{"location":"pathes/list_recursive_dirs.html#pathes.list_recursive_dirs","text":"","title":"list_recursive_dirs()"},{"location":"pathes/list_recursive_files.html","text":"list_recursive_files ( input_path , condition = 'True' )","title":"list_recursive_files"},{"location":"pathes/list_recursive_files.html#_1","text":"","title":""},{"location":"pathes/list_recursive_files.html#pathes.list_recursive_files","text":"","title":"list_recursive_files()"},{"location":"pathes/list_toplevel_dirs.html","text":"list_toplevel_dirs ( input_path )","title":"list_toplevel_dirs"},{"location":"pathes/list_toplevel_dirs.html#_1","text":"","title":""},{"location":"pathes/list_toplevel_dirs.html#pathes.list_toplevel_dirs","text":"","title":"list_toplevel_dirs()"},{"location":"pathes/list_toplevel_files.html","text":"list_toplevel_files ( input_path )","title":"list_toplevel_files"},{"location":"pathes/list_toplevel_files.html#_1","text":"","title":""},{"location":"pathes/list_toplevel_files.html#pathes.list_toplevel_files","text":"","title":"list_toplevel_files()"},{"location":"pathes/re_folder_search.html","text":"re_folder_search ( input_folder , regexp , ** kwargs ) Scans a folder an returns a list of the paths to files that matched the requirements. Uses regular expressions. Previously named RegFileSearch Parameters: Name Type Description Default input_folder TYPE DESCRIPTION. required regexp TYPE DESCRIPTION. required **kwargs optional DESCRIPTION. {} Returns: Type Description list none DESCRIPTION.","title":"re_folder_search"},{"location":"pathes/re_folder_search.html#_1","text":"","title":""},{"location":"pathes/re_folder_search.html#pathes.re_folder_search","text":"Scans a folder an returns a list of the paths to files that matched the requirements. Uses regular expressions. Previously named RegFileSearch Parameters: Name Type Description Default input_folder TYPE DESCRIPTION. required regexp TYPE DESCRIPTION. required **kwargs optional DESCRIPTION. {} Returns: Type Description list none DESCRIPTION.","title":"re_folder_search()"},{"location":"pathes/remove_common_prefix.html","text":"remove_common_prefix ( input_path , common_root_base ) Compare an input path and a path with a common root with the input path, and returns only the part of the input path that is not shared with the _common_root_path. Previously named RemoveCommonPrefix Parameters: Name Type Description Default input_path TYPE DESCRIPTION. required common_root_base TYPE DESCRIPTION. required Returns: Type Description TYPE DESCRIPTION.","title":"remove_common_prefix"},{"location":"pathes/remove_common_prefix.html#_1","text":"","title":""},{"location":"pathes/remove_common_prefix.html#pathes.remove_common_prefix","text":"Compare an input path and a path with a common root with the input path, and returns only the part of the input path that is not shared with the _common_root_path. Previously named RemoveCommonPrefix Parameters: Name Type Description Default input_path TYPE DESCRIPTION. required common_root_base TYPE DESCRIPTION. required Returns: Type Description TYPE DESCRIPTION.","title":"remove_common_prefix()"},{"location":"pathes/separate_path_components.html","text":"separate_path_components ( input_path )","title":"separate_path_components"},{"location":"pathes/separate_path_components.html#_1","text":"","title":""},{"location":"pathes/separate_path_components.html#pathes.separate_path_components","text":"","title":"separate_path_components()"},{"location":"pathes/switch_root.html","text":"switch_root ( input_path , original_root , new_root ) Processed a path to a destination with an \"original_root\", and replaces this root, if shared with the input_path, for the new root (entirely included). Previously named SwitchRoot Parameters: Name Type Description Default input_path TYPE DESCRIPTION. required original_root TYPE DESCRIPTION. required new_root TYPE DESCRIPTION. required Returns: Type Description TYPE DESCRIPTION.","title":"switch_root"},{"location":"pathes/switch_root.html#_1","text":"","title":""},{"location":"pathes/switch_root.html#pathes.switch_root","text":"Processed a path to a destination with an \"original_root\", and replaces this root, if shared with the input_path, for the new root (entirely included). Previously named SwitchRoot Parameters: Name Type Description Default input_path TYPE DESCRIPTION. required original_root TYPE DESCRIPTION. required new_root TYPE DESCRIPTION. required Returns: Type Description TYPE DESCRIPTION.","title":"switch_root()"},{"location":"pathes/up_folder.html","text":"up_folder ( input_path , steps ) Returns the input_path where we removed the deepest folders, N times. Previously named UpFolder Parameters: Name Type Description Default input_path str DESCRIPTION. required steps int N * stemps is the number of folders removed from the base of the path. required Returns: Type Description TYPE DESCRIPTION.","title":"up_folder"},{"location":"pathes/up_folder.html#_1","text":"","title":""},{"location":"pathes/up_folder.html#pathes.up_folder","text":"Returns the input_path where we removed the deepest folders, N times. Previously named UpFolder Parameters: Name Type Description Default input_path str DESCRIPTION. required steps int N * stemps is the number of folders removed from the base of the path. required Returns: Type Description TYPE DESCRIPTION.","title":"up_folder()"},{"location":"signals/get_array_splices_infos.html","text":"get_array_splices_infos ( List , threshold = None )","title":"get_array_splices_infos"},{"location":"signals/get_array_splices_infos.html#_1","text":"","title":""},{"location":"signals/get_array_splices_infos.html#signals.get_array_splices_infos","text":"","title":"get_array_splices_infos()"},{"location":"signals/removenans.html","text":"removenans ( array )","title":"removenans"},{"location":"signals/removenans.html#_1","text":"","title":""},{"location":"signals/removenans.html#signals.removenans","text":"","title":"removenans()"},{"location":"signals/splicedArray.html","text":"splicedArray Examples: '''python vanilla_numpy_array = np . array ( [ np . nan , 1 , 2 , 3 , 3 , np . nan , np . nan , 23 , 32 , np . nan , 2212 , 2 , 2 , 332 ] ) better_array = splicedArray ( test ) print ( better_array ) # this is still a numpy array ... but boosted with special abilities : print ( better_array . a ) # use array . a to get only non_nan values off the array . Usefull to feed into functions that do not cope well with nans . To get back the nan at the places of the original array into itself , or an array of the same shape where values have been transformed by any function , use either transformed_better_array = better_array ( a_function_not_working_with_nans ( better_array . a ) ) print ( toast ( toast . a )) # equivalent of doing that . ''' Tip When using the call better_array(array) to put back nan in place, if the shape has changed on one dimension, for example, because of a numerical derivative operation, the output array will be given back it's original shape, appendded at the end by as much np.nan as necessary. This can be adjusted by adding a second optionnal parameter, with value, \"start\" , \"end\" ,or \"none\" . Default is \"end\" Example : better_array ( array , \"none\" ) #will not be shape-fixed better_array ( array , \"start\" ) #will not shape-fixed by addind np.nan at the start IF NECESSARY. Attributes signals . splicedArray . a property readonly Extracts only the non_nan values off the array. Returns: Type Description np.array An array with no nan inside.","title":"splicedArray"},{"location":"signals/splicedArray.html#_1","text":"","title":""},{"location":"signals/splicedArray.html#signals.splicedArray","text":"Examples: '''python vanilla_numpy_array = np . array ( [ np . nan , 1 , 2 , 3 , 3 , np . nan , np . nan , 23 , 32 , np . nan , 2212 , 2 , 2 , 332 ] ) better_array = splicedArray ( test ) print ( better_array ) # this is still a numpy array ... but boosted with special abilities : print ( better_array . a ) # use array . a to get only non_nan values off the array . Usefull to feed into functions that do not cope well with nans . To get back the nan at the places of the original array into itself , or an array of the same shape where values have been transformed by any function , use either transformed_better_array = better_array ( a_function_not_working_with_nans ( better_array . a ) ) print ( toast ( toast . a )) # equivalent of doing that . ''' Tip When using the call better_array(array) to put back nan in place, if the shape has changed on one dimension, for example, because of a numerical derivative operation, the output array will be given back it's original shape, appendded at the end by as much np.nan as necessary. This can be adjusted by adding a second optionnal parameter, with value, \"start\" , \"end\" ,or \"none\" . Default is \"end\" Example : better_array ( array , \"none\" ) #will not be shape-fixed better_array ( array , \"start\" ) #will not shape-fixed by addind np.nan at the start IF NECESSARY.","title":"splicedArray"},{"location":"signals/splicedArray.html#signals.splicedArray-attributes","text":"","title":"Attributes"},{"location":"signals/splicedArray.html#signals.splicedArray.a","text":"Extracts only the non_nan values off the array. Returns: Type Description np.array An array with no nan inside.","title":"a"},{"location":"signals/splicedArrayBuilder.html","text":"splicedArrayBuilder","title":"splicedArrayBuilder"},{"location":"signals/splicedArrayBuilder.html#_1","text":"","title":""},{"location":"signals/splicedArrayBuilder.html#signals.splicedArrayBuilder","text":"","title":"splicedArrayBuilder"},{"location":"strings/alphanum_sort.html","text":"alphanum_sort ( list_of_strings ) Sorts an iterable of strings by alphanumeric value. Previously named AlphaNum_Sort Parameters: Name Type Description Default list_of_strings list contains N strings elements. required Returns: Type Description list list of strings sorted. Note The return type will be a copy of the input type.","title":"alphanum_sort"},{"location":"strings/alphanum_sort.html#_1","text":"","title":""},{"location":"strings/alphanum_sort.html#strings.alphanum_sort","text":"Sorts an iterable of strings by alphanumeric value. Previously named AlphaNum_Sort Parameters: Name Type Description Default list_of_strings list contains N strings elements. required Returns: Type Description list list of strings sorted. Note The return type will be a copy of the input type.","title":"alphanum_sort()"},{"location":"strings/greek.html","text":"greek ( input_str )","title":"greek"},{"location":"strings/greek.html#_1","text":"","title":""},{"location":"strings/greek.html#strings.greek","text":"","title":"greek()"},{"location":"strings/quick_regexp.html","text":"quick_regexp ( input_line , regex , ** kwargs ) Simplified implementation for matching regular expressions. Utility for python's built_in module re . Previously named QuickRegexp Tip Design your patterns easily at Regex101 Parameters: Name Type Description Default input_line str Source on wich the pattern will be searched. required regex str Regex pattern to match on the source. required **kwargs optional groupidx : ( int ) group index in case there is groups. Defaults to None (first group returned) matchid : ( int ) match index in case there is multiple matchs. Defaults to None (first match returned) case : ( bool ) False / True : case sensitive regexp matching (default False ) {} Returns: Type Description Bool , str False or string containing matched content. Warning This function returns only one group/match.","title":"quick_regexp"},{"location":"strings/quick_regexp.html#_1","text":"","title":""},{"location":"strings/quick_regexp.html#strings.quick_regexp","text":"Simplified implementation for matching regular expressions. Utility for python's built_in module re . Previously named QuickRegexp Tip Design your patterns easily at Regex101 Parameters: Name Type Description Default input_line str Source on wich the pattern will be searched. required regex str Regex pattern to match on the source. required **kwargs optional groupidx : ( int ) group index in case there is groups. Defaults to None (first group returned) matchid : ( int ) match index in case there is multiple matchs. Defaults to None (first match returned) case : ( bool ) False / True : case sensitive regexp matching (default False ) {} Returns: Type Description Bool , str False or string containing matched content. Warning This function returns only one group/match.","title":"quick_regexp()"},{"location":"structs/TwoLayerDict.html","text":"TwoLayerDict Methods structs . TwoLayerDict . __init__ ( self , value = None ) special A class for a forced two layer indexing dictionnary. Usefull to access config files with section param value architecture and read-write to them seamlessly from this python object as if it was only a nested dictionnary. Based on sdict and inheriting from it's indexation abilities. Parameters value : TYPE, optional DESCRIPTION. The default is None. Returns None. Timothe Jost - 2021 structs . TwoLayerDict . get ( self , outer , inner , default = None ) Return the value for key if key is in the dictionary, else default. structs . TwoLayerDict . update ( self , value ) D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k]","title":"TwoLayerDict"},{"location":"structs/TwoLayerDict.html#_1","text":"","title":""},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict","text":"","title":"TwoLayerDict"},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict-methods","text":"","title":"Methods"},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict.__init__","text":"A class for a forced two layer indexing dictionnary. Usefull to access config files with section param value architecture and read-write to them seamlessly from this python object as if it was only a nested dictionnary. Based on sdict and inheriting from it's indexation abilities.","title":"__init__()"},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict.__init__--parameters","text":"value : TYPE, optional DESCRIPTION. The default is None.","title":"Parameters"},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict.__init__--returns","text":"None. Timothe Jost - 2021","title":"Returns"},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict.get","text":"Return the value for key if key is in the dictionary, else default.","title":"get()"},{"location":"structs/TwoLayerDict.html#structs.TwoLayerDict.update","text":"D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k]","title":"update()"},{"location":"structs/func_io_typematch.html","text":"func_io_typematch Converts a type back to the one it had entering a function.","title":"func_io_typematch"},{"location":"structs/func_io_typematch.html#_1","text":"","title":""},{"location":"structs/func_io_typematch.html#structs.func_io_typematch","text":"Converts a type back to the one it had entering a function.","title":"func_io_typematch"},{"location":"structs/get_properties_names.html","text":"get_properties_names ( cls ) Get a list of all the names of the properties of a given class. (usefull for copying all variables/parameters of an object programatically with eval) Parameters cls : TYPE DESCRIPTION. Returns TYPE All properties that are not callable (= most of the existing variables except some dumb variables like the callable ones i created, (like nan_padded_array).","title":"get_properties_names"},{"location":"structs/get_properties_names.html#_1","text":"","title":""},{"location":"structs/get_properties_names.html#structs.get_properties_names","text":"Get a list of all the names of the properties of a given class. (usefull for copying all variables/parameters of an object programatically with eval)","title":"get_properties_names()"},{"location":"structs/get_properties_names.html#structs.get_properties_names--parameters","text":"cls : TYPE DESCRIPTION.","title":"Parameters"},{"location":"structs/get_properties_names.html#structs.get_properties_names--returns","text":"TYPE All properties that are not callable (= most of the existing variables except some dumb variables like the callable ones i created, (like nan_padded_array).","title":"Returns"},{"location":"structs/sdict.html","text":"default_proxy Just an empty class to fake a default condition equal to no other possible value the user could enter. (because we want to preserve None as a possible user value in this case)","title":"sdict"},{"location":"structs/sdict.html#_1","text":"","title":""},{"location":"structs/sdict.html#structs.sdict.default_proxy","text":"Just an empty class to fake a default condition equal to no other possible value the user could enter. (because we want to preserve None as a possible user value in this case)","title":"default_proxy"},{"location":"workflows/CachedVariables.html","text":"CachedVariables Methods workflows . CachedVariables . __init__ ( self , ** kwargs ) special Handle file and ram representation of user selected current working variables that needs to be saved to later execution sessions, to improve work efficiency and user experience, mainly intended to use with GUI work variables. Parameters: Name Type Description Default **kwargs optionnal description ( str ): cache_dir_path ( str ): path to the .ini file if you wish to save it in a custom location. By default, it will be saved in the LabUtils package, inside the varcache folder. distinguisher ( str ): Warning : Advanced user If you wish to have the ability to have several variables caches configurations for a class implementing a CachedVariables object, and if that class is called from several functions, you will need to disambiguate the .ini file with such distinguisher. Question: TODO Add the ability to simply roll back the caller to the top, so the user doesn't have to specify itself subjective distinguisher strings in the code depending on if it has been called from here or there. {} Returns: Type Description CachedVariables An instance of the class Info how to use inspect: import inspect inspect . stack first index content : inspect . stack ()[ 0 ] #callee inspect . stack ()[ 1 ] #caller inspect . stack ()[ 2 ] #caller's caller etc #inspect.stack second index content, for the caller in that case frame , filename , line_number , function_name , lines , index = inspect . stack ()[ 1 ][ 1 ] workflows . CachedVariables . retrieve ( self , date ) Question TODO Retrieve function to load previous values by putting the section named by date if existing, into current section. Returns: Type Description None. workflows . CachedVariables . save ( self ) Question TODO Save function to save current values by putting them into a section named by date. Could be usefull to make sets of parameters that have been saved and can be easily switched to X or Y config, for user interfaces in particular. Returns: Type Description None.","title":"CachedVariables"},{"location":"workflows/CachedVariables.html#_1","text":"","title":""},{"location":"workflows/CachedVariables.html#workflows.CachedVariables","text":"","title":"CachedVariables"},{"location":"workflows/CachedVariables.html#workflows.CachedVariables-methods","text":"","title":"Methods"},{"location":"workflows/CachedVariables.html#workflows.CachedVariables.__init__","text":"Handle file and ram representation of user selected current working variables that needs to be saved to later execution sessions, to improve work efficiency and user experience, mainly intended to use with GUI work variables. Parameters: Name Type Description Default **kwargs optionnal description ( str ): cache_dir_path ( str ): path to the .ini file if you wish to save it in a custom location. By default, it will be saved in the LabUtils package, inside the varcache folder. distinguisher ( str ): Warning : Advanced user If you wish to have the ability to have several variables caches configurations for a class implementing a CachedVariables object, and if that class is called from several functions, you will need to disambiguate the .ini file with such distinguisher. Question: TODO Add the ability to simply roll back the caller to the top, so the user doesn't have to specify itself subjective distinguisher strings in the code depending on if it has been called from here or there. {} Returns: Type Description CachedVariables An instance of the class Info how to use inspect: import inspect inspect . stack first index content : inspect . stack ()[ 0 ] #callee inspect . stack ()[ 1 ] #caller inspect . stack ()[ 2 ] #caller's caller etc #inspect.stack second index content, for the caller in that case frame , filename , line_number , function_name , lines , index = inspect . stack ()[ 1 ][ 1 ]","title":"__init__()"},{"location":"workflows/CachedVariables.html#workflows.CachedVariables.retrieve","text":"Question TODO Retrieve function to load previous values by putting the section named by date if existing, into current section. Returns: Type Description None.","title":"retrieve()"},{"location":"workflows/CachedVariables.html#workflows.CachedVariables.save","text":"Question TODO Save function to save current values by putting them into a section named by date. Could be usefull to make sets of parameters that have been saved and can be easily switched to X or Y config, for user interfaces in particular. Returns: Type Description None.","title":"save()"},{"location":"workflows/ProgressBarImage.html","text":"ProgressBarImage ( Fraction )","title":"ProgressBarImage"},{"location":"workflows/ProgressBarImage.html#_1","text":"","title":""},{"location":"workflows/ProgressBarImage.html#workflows.ProgressBarImage","text":"","title":"ProgressBarImage()"},{"location":"workflows/get_currentfile_git_repo_metadata.html","text":"get_currentfile_git_repo_metadata ( input_path = None )","title":"get_currentfile_git_repo_metadata"},{"location":"workflows/get_currentfile_git_repo_metadata.html#_1","text":"","title":""},{"location":"workflows/get_currentfile_git_repo_metadata.html#workflows.get_currentfile_git_repo_metadata","text":"","title":"get_currentfile_git_repo_metadata()"},{"location":"workflows/singleton.html","text":"singleton ( cls )","title":"singleton"},{"location":"workflows/singleton.html#_1","text":"","title":""},{"location":"workflows/singleton.html#workflows.singleton","text":"","title":"singleton()"},{"location":"workflows/sizeof_fmt.html","text":"sizeof_fmt ( num , suffix = 'oct' ) by Fred Cirera, https://stackoverflow.com/a/1094933/1870254, modified","title":"sizeof_fmt"},{"location":"workflows/sizeof_fmt.html#_1","text":"","title":""},{"location":"workflows/sizeof_fmt.html#workflows.sizeof_fmt","text":"by Fred Cirera, https://stackoverflow.com/a/1094933/1870254, modified","title":"sizeof_fmt()"}]}